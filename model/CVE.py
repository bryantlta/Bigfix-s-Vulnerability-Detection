class CVE:
    def __init__(self, cveId = "9999-9999", severity = "Unspecified", site = "None", severityScore = 0):
        self.id = cveId
        self.severityScore = severityScore
        self.severity = severity
        self.site = site

        if severityScore == 0:
            self.severityToSeverityScore()

    def getId(self):
        return self.id
    
    def getSeverityScore(self):
        return self.severityScore

    def setSeverityScore(self, score):
        self.severityScore = score
        return self.severityScore
    
    def severityToSeverityScore(self):
         if self.severity == "Unspecified" or self.severity == "<unspecified>" or self.severity == "N/A":
            return 0

        scoringMap = {
            "BES Inventory and License": {
                "Low": 4,
                "High": 7
            },

            "BES Support":{
                "Low": 2,
                "Moderate": 4,
                "Important": 6,
                "Critical": 8,
            },

            "Patches for CentOS7 Plugin R2": {
                "Low": 2,
                "Moderate": 4,
                "Important": 6,
                "Critical": 8,
            },

            "Patches for Windows":{
                "Low": 2,
                "Moderate": 4,
                "Important": 6,
                "Critical": 8,
            },

            "Patching Support":{
                "Important": 4,
                "Critical": 7,
            },

            "Updates for Windows Applications":{
                "Moderate": 2,
                "High": 4, 
                "Important": 6,
                "Critical": 8,
            },

            "Vulnerabilities to Windows Systems":{
                "Low": 2.5,
                "Medium": 5,
                "High": 7.5
            }
        }

        if site not in scoringMap:
            return 0
        elif severity not in scoringMap[site]:
            return 0
        else:
            severityScore = scoringMap[site][severity]
            self.setSeverityScore(severityScore)
            return scoringMap[site][severity]