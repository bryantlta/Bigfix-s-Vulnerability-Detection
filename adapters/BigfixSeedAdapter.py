class BigFixSeedAdapter(IVAAdapter):
    def __init__(self):
        self.config = ConfigManager()
        self.assets = self.computeAssetObjects()

        for asset in self.assets:
            cves = self.mapCves(asset)
            asset.updateCves(cves)
    
    def filterAssets(self):
        raise NotImplementedError
    
    def getAssets(self):
        return self.assets
    
    def computeAssetObjects(self):
        relevance = '(names of it,id of it, operating system of it |"OSTypeNotFound") of bes computers'
        uri = '/api/query?relevance=' + relevance
        resObj = self.getRequest(self.config.server, self.config.port, self.config.username, self.config.password, uri)
        assets = self.processOS(resObj)
        return assets

    def processOS(self, resObj):
        xmlstr = resObj._content.decode('utf-8')

        assets = []

        from xml.etree import cElementTree as ET
        besApi = ET.fromstring(xmlstr)
        query = list(besApi)[0]
        result = list(query)[0]
        for tup in result:
            name, besid, os = list(tup)
            newAsset = Asset(os.text, 0, name.text, besid.text, [])
            assets.append(newAsset)
        return assets
    
    def mapCves(self, asset):
        uri = "/api/query?relevance=((cve id lists of it, source severity of it, display name of site of it) of relevant fixlets of it) of bes computers whose (id of it = " + asset.getBesid() + ")"
        resObj = self.getRequest(self.config.server, self.config.port, self.config.username, self.config.password, uri)
        cves = self.processCVE(resObj)
        return cves
    
    def processCve(self, resObj):
        xmlstr = resObj._content.decode('utf-8')
        cves = []

        from xml.etree import cElementTree as ET
        besApi = ET.fromstring(xmlstr)
        query = list(besApi)[0]
        result = list(query)[0]

        for tup in list(result):
            cve, severity, site = list(tup)
            cve = cve.text
            severity = severity.text
            site = site.text

            if cve != 'Unspecified' and cve != 'N/A' and cve != None:
                newCves = cve.split(";")
                for cve in newCves:
                    newCve = CVE(cve, severity, site, 0)
                    cves.append(newCve)

        return cves
    