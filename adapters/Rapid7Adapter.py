class Rapid7Adapter(IVAAdapter):
    def __init__(self):
        self.config = ConfigManager()
        self.assets = self.computeAssetObjects()

        for asset in self.assets:
            cves = self.mapCves(asset)
            asset.mapCves(cves)

    def computeAssetObjects(self):
        import json 

        uri = "/api/3/assets"
        resObj = self.getRequest(self.config.server, self.config.port, self.config.user, self.config.password, uri)
        assetObjs = json.loads(resObj._content)['resources']

        assets = []
        for assetObj in assetObjs:
            hostname, assetId = assetObj['hostName'], assetObj['id']
                newAsset = Asset(hostname, assetId, None, None, [], None)
                assets.append(newAsset)
        return assets

    def mapCves(self, asset):
        import json

        # Getting Count of Page.
        uri = "/api/3/assets/{}/vulnerabilities".format(asset.getAssetId())
        resObj = self.getRequest(self.config.server, self.config.port, self.config.user, self.config.password, uri)
        cveCount = json.loads(resObj._content)['page']['totalResources']

        # Iterating on number of cves.
        uri = "/api/3/assets/{}/vulnerabilities?size={}".format(asset.getAssetId(), cveCount)
        resObj = self.getRequest(self.config.server, self.config.port, self.config.user, self.config.password, uri)
        cveObjects = json.loads(resObj._content)['resources']

        cves = []
        # Getting info for each CVE. 
        for cveObj in cveObjects:
            cveId = cveObj['id']

            uri = '/api/3/vulnerabilities/{}'.format(cveId)
            resObj = self.getRequest(self.config.server, self.config.port, self.config.username, self.config.password, uri)
            jsonObj = json.loads(resObj._content)

            try:
                newCve = CVE(jsonObj['cves'][0], None, None, jsonObj['pci']['adjustedCVSSScore'])
            except:
                newCve = CVE(cveId, None, None, jsonObj['pci']['adjustedCVSSScore'])

            cves.append(newCve)
        return cves